import 'dart:ui';

import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:paintroid/core/commands/command_implementation/graphic/shape/shape_command.dart';
import 'package:paintroid/core/json_serialization/converter/offset_converter.dart';
import 'package:paintroid/core/json_serialization/converter/paint_converter.dart';
import 'package:paintroid/core/json_serialization/versioning/serializer_version.dart';
import 'package:paintroid/core/json_serialization/versioning/version_strategy.dart';

part 'circle_shape_command.g.dart';

@JsonSerializable()
class CircleShapeCommand extends ShapeCommand {
  double radius;
  @OffsetConverter()
  Offset center;

  final int version;
  final String type;

  CircleShapeCommand(
    super.paint,
    this.radius,
    this.center, {
    int? version,
    this.type = SerializerType.CIRCLE_SHAPE_COMMAND,
  }) : version = version ??
            VersionStrategyManager.strategy.getCircleShapeCommandVersion();

  @override
  void call(Canvas canvas) => canvas.drawCircle(center, radius, paint);

  @override
  List<Object?> get props => [paint, radius, center];

  @override
  Map<String, dynamic> toJson() => _$CircleShapeCommandToJson(this);

  factory CircleShapeCommand.fromJson(Map<String, dynamic> json) {
    int version = json['version'] as int;

    switch (version) {
      case Version.v1:
        return _$CircleShapeCommandFromJson(json);
      case Version.v2:
      // For different versions of RectangleShapeCommand the deserialization
      // has to be implemented manually.
      // Autogenerated code can only be used for one version
      default:
        return _$CircleShapeCommandFromJson(json);
    }
  }
}
