// Dart imports:
import 'dart:convert';
import 'dart:typed_data';

// Package imports:
import 'package:command/command.dart';
import 'package:freezed_annotation/freezed_annotation.dart';

// Project imports:
import 'package:io_library/io_library.dart';

part 'catrobat_image.g.dart';

@JsonSerializable()
class CatrobatImage {
  final String magicValue;
  final int version;
  final int width;
  final int height;
  final Iterable<Command> commands;
  final String backgroundImage;

  CatrobatImage(
    this.commands,
    this.width,
    this.height,
    this.backgroundImage, {
    int? version,
    this.magicValue = 'CATROBAT',
  }) : version = version ??
            VersionStrategyManager.strategy.getCatrobatImageVersion();

  Uint8List toBytes() {
    Map<String, dynamic> jsonMap = toJson();
    String jsonString = json.encode(jsonMap);
    return utf8.encode(jsonString) as Uint8List;
  }

  static CatrobatImage fromBytes(Uint8List bytes) {
    String jsonString = utf8.decode(bytes);
    Map<String, dynamic> jsonMap = json.decode(jsonString);
    return CatrobatImage.fromJson(jsonMap);
  }

  Map<String, dynamic> toJson() => _$CatrobatImageToJson(this);

  factory CatrobatImage.fromJson(Map<String, dynamic> json) {
    int version = json['version'] as int;

    switch (version) {
      case Version.v1:
        return _$CatrobatImageFromJson(json);
      case Version.v2:
      // For different versions of CatrobatImage the deserialization
      // has to be implemented manually.
      // Autogenerated code can only be used for one version
      default:
        return _$CatrobatImageFromJson(json);
    }
  }
}
