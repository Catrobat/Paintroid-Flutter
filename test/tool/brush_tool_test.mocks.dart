// Mocks generated by Mockito 5.2.0 from annotations
// in paintroid/test/tool/brush_tool_test.dart.
// Do not manually edit this file.

import 'dart:ui' as _i2;

import 'package:mockito/mockito.dart' as _i1;
import 'package:paintroid/command/command.dart' as _i3;
import 'package:paintroid/command/command_manager.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeColor_0 extends _i1.Fake implements _i2.Color {}

/// A class which mocks [Paint].
///
/// See the documentation for Mockito's code generation for more information.
class MockPaint extends _i1.Mock implements _i2.Paint {
  MockPaint() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isAntiAlias =>
      (super.noSuchMethod(Invocation.getter(#isAntiAlias), returnValue: false)
          as bool);
  @override
  set isAntiAlias(bool? value) =>
      super.noSuchMethod(Invocation.setter(#isAntiAlias, value),
          returnValueForMissingStub: null);
  @override
  _i2.Color get color => (super.noSuchMethod(Invocation.getter(#color),
      returnValue: _FakeColor_0()) as _i2.Color);
  @override
  set color(_i2.Color? value) =>
      super.noSuchMethod(Invocation.setter(#color, value),
          returnValueForMissingStub: null);
  @override
  _i2.BlendMode get blendMode =>
      (super.noSuchMethod(Invocation.getter(#blendMode),
          returnValue: _i2.BlendMode.clear) as _i2.BlendMode);
  @override
  set blendMode(_i2.BlendMode? value) =>
      super.noSuchMethod(Invocation.setter(#blendMode, value),
          returnValueForMissingStub: null);
  @override
  _i2.PaintingStyle get style => (super.noSuchMethod(Invocation.getter(#style),
      returnValue: _i2.PaintingStyle.fill) as _i2.PaintingStyle);
  @override
  set style(_i2.PaintingStyle? value) =>
      super.noSuchMethod(Invocation.setter(#style, value),
          returnValueForMissingStub: null);
  @override
  double get strokeWidth =>
      (super.noSuchMethod(Invocation.getter(#strokeWidth), returnValue: 0.0)
          as double);
  @override
  set strokeWidth(double? value) =>
      super.noSuchMethod(Invocation.setter(#strokeWidth, value),
          returnValueForMissingStub: null);
  @override
  _i2.StrokeCap get strokeCap =>
      (super.noSuchMethod(Invocation.getter(#strokeCap),
          returnValue: _i2.StrokeCap.butt) as _i2.StrokeCap);
  @override
  set strokeCap(_i2.StrokeCap? value) =>
      super.noSuchMethod(Invocation.setter(#strokeCap, value),
          returnValueForMissingStub: null);
  @override
  _i2.StrokeJoin get strokeJoin =>
      (super.noSuchMethod(Invocation.getter(#strokeJoin),
          returnValue: _i2.StrokeJoin.miter) as _i2.StrokeJoin);
  @override
  set strokeJoin(_i2.StrokeJoin? value) =>
      super.noSuchMethod(Invocation.setter(#strokeJoin, value),
          returnValueForMissingStub: null);
  @override
  double get strokeMiterLimit => (super
          .noSuchMethod(Invocation.getter(#strokeMiterLimit), returnValue: 0.0)
      as double);
  @override
  set strokeMiterLimit(double? value) =>
      super.noSuchMethod(Invocation.setter(#strokeMiterLimit, value),
          returnValueForMissingStub: null);
  @override
  set maskFilter(_i2.MaskFilter? value) =>
      super.noSuchMethod(Invocation.setter(#maskFilter, value),
          returnValueForMissingStub: null);
  @override
  _i2.FilterQuality get filterQuality =>
      (super.noSuchMethod(Invocation.getter(#filterQuality),
          returnValue: _i2.FilterQuality.none) as _i2.FilterQuality);
  @override
  set filterQuality(_i2.FilterQuality? value) =>
      super.noSuchMethod(Invocation.setter(#filterQuality, value),
          returnValueForMissingStub: null);
  @override
  set shader(_i2.Shader? value) =>
      super.noSuchMethod(Invocation.setter(#shader, value),
          returnValueForMissingStub: null);
  @override
  set colorFilter(_i2.ColorFilter? value) =>
      super.noSuchMethod(Invocation.setter(#colorFilter, value),
          returnValueForMissingStub: null);
  @override
  set imageFilter(_i2.ImageFilter? value) =>
      super.noSuchMethod(Invocation.setter(#imageFilter, value),
          returnValueForMissingStub: null);
  @override
  bool get invertColors =>
      (super.noSuchMethod(Invocation.getter(#invertColors), returnValue: false)
          as bool);
  @override
  set invertColors(bool? value) =>
      super.noSuchMethod(Invocation.setter(#invertColors, value),
          returnValueForMissingStub: null);
}

/// A class which mocks [CommandManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockCommandManager<C extends _i3.Command> extends _i1.Mock
    implements _i4.CommandManager<C> {
  MockCommandManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<C> get commands =>
      (super.noSuchMethod(Invocation.getter(#commands), returnValue: <C>[])
          as List<C>);
}
