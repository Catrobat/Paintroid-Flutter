// Mocks generated by Mockito 5.4.4 from annotations
// in paintroid/test/unit/tools/brush_tool_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:ui' as _i2;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:paintroid/core/commands/command_factory/command_factory.dart'
    as _i9;
import 'package:paintroid/core/commands/command_implementation/command.dart'
    as _i7;
import 'package:paintroid/core/commands/command_implementation/graphic/draw_path_command.dart'
    as _i4;
import 'package:paintroid/core/commands/command_implementation/graphic/graphic_command.dart'
    as _i8;
import 'package:paintroid/core/commands/command_manager/command_manager.dart'
    as _i6;
import 'package:paintroid/core/commands/graphic_factory/graphic_factory.dart'
    as _i10;
import 'package:paintroid/core/commands/utils/path_with_action_history.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePath_0 extends _i1.SmartFake implements _i2.Path {
  _FakePath_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOffset_1 extends _i1.SmartFake implements _i2.Offset {
  _FakeOffset_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRect_2 extends _i1.SmartFake implements _i2.Rect {
  _FakeRect_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePathWithActionHistory_3 extends _i1.SmartFake
    implements _i3.PathWithActionHistory {
  _FakePathWithActionHistory_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePaint_4 extends _i1.SmartFake implements _i2.Paint {
  _FakePaint_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDrawPathCommand_5 extends _i1.SmartFake
    implements _i4.DrawPathCommand {
  _FakeDrawPathCommand_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePictureRecorder_6 extends _i1.SmartFake
    implements _i2.PictureRecorder {
  _FakePictureRecorder_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCanvas_7 extends _i1.SmartFake implements _i2.Canvas {
  _FakeCanvas_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PathWithActionHistory].
///
/// See the documentation for Mockito's code generation for more information.
class MockPathWithActionHistory extends _i1.Mock
    implements _i3.PathWithActionHistory {
  MockPathWithActionHistory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Path get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: _FakePath_0(
          this,
          Invocation.getter(#path),
        ),
      ) as _i2.Path);

  @override
  List<_i3.PathAction> get actions => (super.noSuchMethod(
        Invocation.getter(#actions),
        returnValue: <_i3.PathAction>[],
      ) as List<_i3.PathAction>);

  @override
  void moveTo(
    double? x,
    double? y,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #moveTo,
          [
            x,
            y,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void lineTo(
    double? x,
    double? y,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #lineTo,
          [
            x,
            y,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [Offset].
///
/// See the documentation for Mockito's code generation for more information.
class MockOffset extends _i1.Mock implements _i2.Offset {
  MockOffset() {
    _i1.throwOnMissingStub(this);
  }

  @override
  double get dx => (super.noSuchMethod(
        Invocation.getter(#dx),
        returnValue: 0.0,
      ) as double);

  @override
  double get dy => (super.noSuchMethod(
        Invocation.getter(#dy),
        returnValue: 0.0,
      ) as double);

  @override
  double get distance => (super.noSuchMethod(
        Invocation.getter(#distance),
        returnValue: 0.0,
      ) as double);

  @override
  double get distanceSquared => (super.noSuchMethod(
        Invocation.getter(#distanceSquared),
        returnValue: 0.0,
      ) as double);

  @override
  double get direction => (super.noSuchMethod(
        Invocation.getter(#direction),
        returnValue: 0.0,
      ) as double);

  @override
  bool get isInfinite => (super.noSuchMethod(
        Invocation.getter(#isInfinite),
        returnValue: false,
      ) as bool);

  @override
  bool get isFinite => (super.noSuchMethod(
        Invocation.getter(#isFinite),
        returnValue: false,
      ) as bool);

  @override
  _i2.Offset scale(
    double? scaleX,
    double? scaleY,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #scale,
          [
            scaleX,
            scaleY,
          ],
        ),
        returnValue: _FakeOffset_1(
          this,
          Invocation.method(
            #scale,
            [
              scaleX,
              scaleY,
            ],
          ),
        ),
      ) as _i2.Offset);

  @override
  _i2.Offset translate(
    double? translateX,
    double? translateY,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #translate,
          [
            translateX,
            translateY,
          ],
        ),
        returnValue: _FakeOffset_1(
          this,
          Invocation.method(
            #translate,
            [
              translateX,
              translateY,
            ],
          ),
        ),
      ) as _i2.Offset);

  @override
  _i2.Offset operator -() => (super.noSuchMethod(
        Invocation.method(
          #-,
          [],
        ),
        returnValue: _FakeOffset_1(
          this,
          Invocation.method(
            #-,
            [],
          ),
        ),
      ) as _i2.Offset);

  @override
  _i2.Offset operator -(_i2.Offset? other) => (super.noSuchMethod(
        Invocation.method(
          #-,
          [other],
        ),
        returnValue: _FakeOffset_1(
          this,
          Invocation.method(
            #-,
            [other],
          ),
        ),
      ) as _i2.Offset);

  @override
  _i2.Offset operator +(_i2.Offset? other) => (super.noSuchMethod(
        Invocation.method(
          #+,
          [other],
        ),
        returnValue: _FakeOffset_1(
          this,
          Invocation.method(
            #+,
            [other],
          ),
        ),
      ) as _i2.Offset);

  @override
  _i2.Offset operator *(double? operand) => (super.noSuchMethod(
        Invocation.method(
          #*,
          [operand],
        ),
        returnValue: _FakeOffset_1(
          this,
          Invocation.method(
            #*,
            [operand],
          ),
        ),
      ) as _i2.Offset);

  @override
  _i2.Offset operator /(double? operand) => (super.noSuchMethod(
        Invocation.method(
          #/,
          [operand],
        ),
        returnValue: _FakeOffset_1(
          this,
          Invocation.method(
            #/,
            [operand],
          ),
        ),
      ) as _i2.Offset);

  @override
  _i2.Offset operator ~/(double? operand) => (super.noSuchMethod(
        Invocation.method(
          #~/,
          [operand],
        ),
        returnValue: _FakeOffset_1(
          this,
          Invocation.method(
            #~/,
            [operand],
          ),
        ),
      ) as _i2.Offset);

  @override
  _i2.Offset operator %(double? operand) => (super.noSuchMethod(
        Invocation.method(
          #%,
          [operand],
        ),
        returnValue: _FakeOffset_1(
          this,
          Invocation.method(
            #%,
            [operand],
          ),
        ),
      ) as _i2.Offset);

  @override
  _i2.Rect operator &(_i2.Size? other) => (super.noSuchMethod(
        Invocation.method(
          #&,
          [other],
        ),
        returnValue: _FakeRect_2(
          this,
          Invocation.method(
            #&,
            [other],
          ),
        ),
      ) as _i2.Rect);

  @override
  bool operator <(_i2.OffsetBase? other) => (super.noSuchMethod(
        Invocation.method(
          #<,
          [other],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool operator <=(_i2.OffsetBase? other) => (super.noSuchMethod(
        Invocation.method(
          #<=,
          [other],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool operator >(_i2.OffsetBase? other) => (super.noSuchMethod(
        Invocation.method(
          #>,
          [other],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool operator >=(_i2.OffsetBase? other) => (super.noSuchMethod(
        Invocation.method(
          #>=,
          [other],
        ),
        returnValue: false,
      ) as bool);
}

/// A class which mocks [DrawPathCommand].
///
/// See the documentation for Mockito's code generation for more information.
class MockDrawPathCommand extends _i1.Mock implements _i4.DrawPathCommand {
  MockDrawPathCommand() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get type => (super.noSuchMethod(
        Invocation.getter(#type),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#type),
        ),
      ) as String);

  @override
  int get version => (super.noSuchMethod(
        Invocation.getter(#version),
        returnValue: 0,
      ) as int);

  @override
  _i3.PathWithActionHistory get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: _FakePathWithActionHistory_3(
          this,
          Invocation.getter(#path),
        ),
      ) as _i3.PathWithActionHistory);

  @override
  List<Object?> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object?>[],
      ) as List<Object?>);

  @override
  _i2.Paint get paint => (super.noSuchMethod(
        Invocation.getter(#paint),
        returnValue: _FakePaint_4(
          this,
          Invocation.getter(#paint),
        ),
      ) as _i2.Paint);

  @override
  void call(_i2.Canvas? canvas) => super.noSuchMethod(
        Invocation.method(
          #call,
          [canvas],
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [CommandManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockCommandManager extends _i1.Mock implements _i6.CommandManager {
  MockCommandManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Iterable<_i7.Command> get history => (super.noSuchMethod(
        Invocation.getter(#history),
        returnValue: <_i7.Command>[],
      ) as Iterable<_i7.Command>);

  @override
  int get count => (super.noSuchMethod(
        Invocation.getter(#count),
        returnValue: 0,
      ) as int);

  @override
  void addGraphicCommand(_i8.GraphicCommand? command) => super.noSuchMethod(
        Invocation.method(
          #addGraphicCommand,
          [command],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void executeLastCommand(_i2.Canvas? canvas) => super.noSuchMethod(
        Invocation.method(
          #executeLastCommand,
          [canvas],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void executeAllCommands(_i2.Canvas? canvas) => super.noSuchMethod(
        Invocation.method(
          #executeAllCommands,
          [canvas],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void discardLastCommand() => super.noSuchMethod(
        Invocation.method(
          #discardLastCommand,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearHistory({Iterable<_i7.Command>? newCommands}) => super.noSuchMethod(
        Invocation.method(
          #clearHistory,
          [],
          {#newCommands: newCommands},
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [CommandFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockCommandFactory extends _i1.Mock implements _i9.CommandFactory {
  MockCommandFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.DrawPathCommand createDrawPathCommand(
    _i3.PathWithActionHistory? path,
    _i2.Paint? paint,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createDrawPathCommand,
          [
            path,
            paint,
          ],
        ),
        returnValue: _FakeDrawPathCommand_5(
          this,
          Invocation.method(
            #createDrawPathCommand,
            [
              path,
              paint,
            ],
          ),
        ),
      ) as _i4.DrawPathCommand);
}

/// A class which mocks [GraphicFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockGraphicFactory extends _i1.Mock implements _i10.GraphicFactory {
  MockGraphicFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Paint createPaint() => (super.noSuchMethod(
        Invocation.method(
          #createPaint,
          [],
        ),
        returnValue: _FakePaint_4(
          this,
          Invocation.method(
            #createPaint,
            [],
          ),
        ),
      ) as _i2.Paint);

  @override
  _i3.PathWithActionHistory createPathWithActionHistory() =>
      (super.noSuchMethod(
        Invocation.method(
          #createPathWithActionHistory,
          [],
        ),
        returnValue: _FakePathWithActionHistory_3(
          this,
          Invocation.method(
            #createPathWithActionHistory,
            [],
          ),
        ),
      ) as _i3.PathWithActionHistory);

  @override
  _i2.PictureRecorder createPictureRecorder() => (super.noSuchMethod(
        Invocation.method(
          #createPictureRecorder,
          [],
        ),
        returnValue: _FakePictureRecorder_6(
          this,
          Invocation.method(
            #createPictureRecorder,
            [],
          ),
        ),
      ) as _i2.PictureRecorder);

  @override
  _i2.Canvas createCanvasWithRecorder(_i2.PictureRecorder? recorder) =>
      (super.noSuchMethod(
        Invocation.method(
          #createCanvasWithRecorder,
          [recorder],
        ),
        returnValue: _FakeCanvas_7(
          this,
          Invocation.method(
            #createCanvasWithRecorder,
            [recorder],
          ),
        ),
      ) as _i2.Canvas);

  @override
  _i2.Paint copyPaint(_i2.Paint? original) => (super.noSuchMethod(
        Invocation.method(
          #copyPaint,
          [original],
        ),
        returnValue: _FakePaint_4(
          this,
          Invocation.method(
            #copyPaint,
            [original],
          ),
        ),
      ) as _i2.Paint);
}
