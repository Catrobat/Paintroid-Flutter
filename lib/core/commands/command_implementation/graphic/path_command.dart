import 'dart:ui';

import 'package:flutter/widgets.dart';

import 'package:json_annotation/json_annotation.dart';

import 'package:paintroid/core/commands/command_implementation/graphic/graphic_command.dart';
import 'package:paintroid/core/commands/path_with_action_history.dart';
import 'package:paintroid/core/json_serialization/converter/paint_converter.dart';
import 'package:paintroid/core/json_serialization/converter/path_with_action_history_converter.dart';
import 'package:paintroid/core/json_serialization/versioning/serializer_version.dart';
import 'package:paintroid/core/json_serialization/versioning/version_strategy.dart';

part 'path_command.g.dart';

@JsonSerializable()
class PathCommand extends GraphicCommand {
  final String type;
  final int version;

  PathCommand(
    this.path,
    super.paint, {
    this.type = SerializerType.PATH_COMMAND,
    int? version,
  }) : version =
            version ?? VersionStrategyManager.strategy.getPathCommandVersion();

  @PathWithActionHistoryConverter()
  final PathWithActionHistory path;

  @override
  void call(Canvas canvas) {
    canvas.drawPath(path.path, paint);
  }

  @override
  List<Object?> get props => [paint, path, type];

  @override
  Map<String, dynamic> toJson() => _$PathCommandToJson(this);

  factory PathCommand.fromJson(Map<String, dynamic> json) {
    int version = json['version'] as int;

    switch (version) {
      case Version.v1:
        return _$PathCommandFromJson(json);
      case Version.v2:
      // For different versions of PathCommand the deserialization
      // has to be implemented manually.
      // Autogenerated code can only be used for one version
      default:
        return _$PathCommandFromJson(json);
    }
  }
}
